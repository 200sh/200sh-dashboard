// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: monitor.sql

package repository

import (
	"context"
)

const createMonitor = `-- name: CreateMonitor :one
INSERT INTO monitor(user_id, url)
VALUES (?, ?)
RETURNING id, user_id, url, created_at, updated_at
`

type CreateMonitorParams struct {
	UserID int64  `json:"user_id"`
	Url    string `json:"url"`
}

func (q *Queries) CreateMonitor(ctx context.Context, arg CreateMonitorParams) (Monitor, error) {
	row := q.db.QueryRowContext(ctx, createMonitor, arg.UserID, arg.Url)
	var i Monitor
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMonitor = `-- name: DeleteMonitor :exec
DELETE
FROM monitor
WHERE id = ?
  AND user_id = ?
`

type DeleteMonitorParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) DeleteMonitor(ctx context.Context, arg DeleteMonitorParams) error {
	_, err := q.db.ExecContext(ctx, deleteMonitor, arg.ID, arg.UserID)
	return err
}

const getMonitorByUserIDAndMonitorID = `-- name: GetMonitorByUserIDAndMonitorID :one
SELECT id, user_id, url, created_at, updated_at
FROM monitor
WHERE user_id = ?
  and id = ?
`

type GetMonitorByUserIDAndMonitorIDParams struct {
	UserID int64 `json:"user_id"`
	ID     int64 `json:"id"`
}

func (q *Queries) GetMonitorByUserIDAndMonitorID(ctx context.Context, arg GetMonitorByUserIDAndMonitorIDParams) (Monitor, error) {
	row := q.db.QueryRowContext(ctx, getMonitorByUserIDAndMonitorID, arg.UserID, arg.ID)
	var i Monitor
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMonitorsByUserID = `-- name: GetMonitorsByUserID :many
SELECT id, user_id, url, created_at, updated_at
FROM monitor
WHERE user_id = ?
`

func (q *Queries) GetMonitorsByUserID(ctx context.Context, userID int64) ([]Monitor, error) {
	rows, err := q.db.QueryContext(ctx, getMonitorsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Monitor
	for rows.Next() {
		var i Monitor
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Url,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
