// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: http_monitor.sql

package repository

import (
	"context"
	"database/sql"
)

const createHttpMonitor = `-- name: CreateHttpMonitor :one
INSERT INTO http_monitor(monitor_id,
                         url,
                         interval_s,
                         retries,
                         timeout_s,
                         expected_status_codes,
                         http_method,
                         http_body,
                         http_headers)
VALUES (?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?,
        ?)
RETURNING monitor_id, url, interval_s, retries, timeout_s, expected_status_codes, http_method, http_body, http_headers
`

type CreateHttpMonitorParams struct {
	MonitorID           int64          `json:"monitor_id"`
	Url                 string         `json:"url"`
	IntervalS           int64          `json:"interval_s"`
	Retries             int64          `json:"retries"`
	TimeoutS            int64          `json:"timeout_s"`
	ExpectedStatusCodes string         `json:"expected_status_codes"`
	HttpMethod          string         `json:"http_method"`
	HttpBody            sql.NullString `json:"http_body"`
	HttpHeaders         sql.NullString `json:"http_headers"`
}

func (q *Queries) CreateHttpMonitor(ctx context.Context, arg CreateHttpMonitorParams) (HttpMonitor, error) {
	row := q.db.QueryRowContext(ctx, createHttpMonitor,
		arg.MonitorID,
		arg.Url,
		arg.IntervalS,
		arg.Retries,
		arg.TimeoutS,
		arg.ExpectedStatusCodes,
		arg.HttpMethod,
		arg.HttpBody,
		arg.HttpHeaders,
	)
	var i HttpMonitor
	err := row.Scan(
		&i.MonitorID,
		&i.Url,
		&i.IntervalS,
		&i.Retries,
		&i.TimeoutS,
		&i.ExpectedStatusCodes,
		&i.HttpMethod,
		&i.HttpBody,
		&i.HttpHeaders,
	)
	return i, err
}

const findHttpMonitorByUserId = `-- name: FindHttpMonitorByUserId :one
SELECT monitor_id, url, interval_s, retries, timeout_s, expected_status_codes, http_method, http_body, http_headers, id, user_id, name, type, created_at, updated_at
FROM http_monitor hm
JOIN main.monitor m on m.id = hm.monitor_id
WHERE m.user_id = ?
`

type FindHttpMonitorByUserIdRow struct {
	MonitorID           int64          `json:"monitor_id"`
	Url                 string         `json:"url"`
	IntervalS           int64          `json:"interval_s"`
	Retries             int64          `json:"retries"`
	TimeoutS            int64          `json:"timeout_s"`
	ExpectedStatusCodes string         `json:"expected_status_codes"`
	HttpMethod          string         `json:"http_method"`
	HttpBody            sql.NullString `json:"http_body"`
	HttpHeaders         sql.NullString `json:"http_headers"`
	ID                  int64          `json:"id"`
	UserID              int64          `json:"user_id"`
	Name                string         `json:"name"`
	Type                string         `json:"type"`
	CreatedAt           sql.NullTime   `json:"created_at"`
	UpdatedAt           sql.NullTime   `json:"updated_at"`
}

func (q *Queries) FindHttpMonitorByUserId(ctx context.Context, userID int64) (FindHttpMonitorByUserIdRow, error) {
	row := q.db.QueryRowContext(ctx, findHttpMonitorByUserId, userID)
	var i FindHttpMonitorByUserIdRow
	err := row.Scan(
		&i.MonitorID,
		&i.Url,
		&i.IntervalS,
		&i.Retries,
		&i.TimeoutS,
		&i.ExpectedStatusCodes,
		&i.HttpMethod,
		&i.HttpBody,
		&i.HttpHeaders,
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateHttpMonitor = `-- name: UpdateHttpMonitor :one
UPDATE http_monitor
SET url = ?,
    interval_s = ?,
    retries = ?,
    timeout_s = ?,
    expected_status_codes = ?,
    http_method = ?,
    http_body = ?,
    http_headers = ?
WHERE monitor_id = ?
RETURNING monitor_id, url, interval_s, retries, timeout_s, expected_status_codes, http_method, http_body, http_headers
`

type UpdateHttpMonitorParams struct {
	Url                 string         `json:"url"`
	IntervalS           int64          `json:"interval_s"`
	Retries             int64          `json:"retries"`
	TimeoutS            int64          `json:"timeout_s"`
	ExpectedStatusCodes string         `json:"expected_status_codes"`
	HttpMethod          string         `json:"http_method"`
	HttpBody            sql.NullString `json:"http_body"`
	HttpHeaders         sql.NullString `json:"http_headers"`
	MonitorID           int64          `json:"monitor_id"`
}

func (q *Queries) UpdateHttpMonitor(ctx context.Context, arg UpdateHttpMonitorParams) (HttpMonitor, error) {
	row := q.db.QueryRowContext(ctx, updateHttpMonitor,
		arg.Url,
		arg.IntervalS,
		arg.Retries,
		arg.TimeoutS,
		arg.ExpectedStatusCodes,
		arg.HttpMethod,
		arg.HttpBody,
		arg.HttpHeaders,
		arg.MonitorID,
	)
	var i HttpMonitor
	err := row.Scan(
		&i.MonitorID,
		&i.Url,
		&i.IntervalS,
		&i.Retries,
		&i.TimeoutS,
		&i.ExpectedStatusCodes,
		&i.HttpMethod,
		&i.HttpBody,
		&i.HttpHeaders,
	)
	return i, err
}
